{"version":3,"sources":["Componenets/Navbar.js","Componenets/TextForm.js","Componenets/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","href","onClick","toggleMode","role","htmlFor","class","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","target","rows","newText1","toUpperCase","newText2","toLowerCase","split","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","prototypes","PropTypes","string","abouttext","isRequired","defaultProps","App","setmode","setalert","showAlert","message","setTimeout","x","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kPAQe,SAASA,EAAOC,GAC3B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACI,sBAAKD,UAAU,kBAAf,UACI,cAAC,IAAD,CAAMA,UAAU,eAAeE,GAAG,IAAlC,SACKH,EAAMI,QAEX,wBACIH,UAAU,iBACVI,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPf,SASI,sBAAMJ,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACI,qBAAIL,UAAU,kCAAd,UACI,oBAAIA,UAAU,WAAd,SACI,mBAAGA,UAAU,kBAAkB,eAAa,OAAOM,KAAK,IAAxD,oBAIJ,oBAAIN,UAAU,gBAiBlB,sBAAKA,UAAU,8BAAf,UACI,uBAAOA,UAAU,sBAAsBO,QAASR,EAAMS,WAAYJ,KAAK,WAAWK,KAAK,SAASJ,GAAG,OACnG,uBAAOL,UAAS,gCAA0C,UAAfD,EAAME,KAAmB,OAAS,SAAWS,QAAQ,yBAAhG,0BAEJ,sBAAKV,UAAU,8BAAf,UACI,uBAAOA,UAAU,mBAAmBI,KAAK,WAAWG,QAASR,EAAMS,WAAYC,KAAK,SAASJ,GAAG,OAChG,uBAAOL,UAAS,gCAA0C,UAAfD,EAAME,KAAmB,OAAS,SAAWS,QAAQ,yBAAhG,yBAEJ,sBAAKC,MAAM,8BAAX,UACI,uBAAOA,MAAM,mBAAmBP,KAAK,WAAWG,QAASR,EAAMS,WAAYC,KAAK,SAASJ,GAAG,OAC5F,uBAAOM,MAAK,gCAA0C,UAAfZ,EAAME,KAAmB,OAAS,SAAWS,QAAQ,yBAA5F,mCC1DT,SAASE,EAASb,GAE7B,MAAwBc,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAgCA,OACI,qCACA,sBAAKf,UAAU,YAAYgB,MAAO,CAACC,MAAoB,SAAblB,EAAME,KAAc,QAAQ,SAAtE,UACI,6BAAKF,EAAMmB,UACX,sBAAKlB,UAAU,OAAf,UACI,0BAAUA,UAAU,eAAemB,MAAOL,EAAME,MAAO,CAACI,gBAA8B,SAAbrB,EAAME,KAAc,OAAO,QAASgB,MAAoB,SAAblB,EAAME,KAAc,QAAQ,SAAUoB,SAThJ,SAACC,GAEnBP,EAAQO,EAAMC,OAAOJ,QAOuKd,GAAG,SAASmB,KAAK,MACrM,wBAAQxB,UAAS,kBAAaD,EAAME,KAAnB,SAAgCM,QAlCxC,WAEjB,IAAIkB,EAAWX,EAAKY,cACpBX,EAAQU,IA+BA,kCACA,wBAAQzB,UAAS,kBAAaD,EAAME,KAAnB,cAAqCM,QA7B7C,WACjB,IAAIoB,EAAWb,EAAKc,cACpBb,EAAQY,IA2BA,kCACA,wBAAQ3B,UAAS,kBAAaD,EAAME,KAAnB,SAAgCM,QAzBrC,WAIpBQ,EADe,KAsBP,8BAKR,sBAAKf,UAAU,iBAAiBgB,MAAO,CAACC,MAAoB,SAAblB,EAAME,KAAc,QAAQ,SAA3E,UACI,mDACA,8BAAIa,EAAKe,MAAM,KAAKC,OAApB,cAAuChB,EAAKgB,OAA5C,iBACA,kCAAK,KAAQhB,EAAKe,MAAM,KAAKC,OAA7B,oBACA,4CACA,4BAAIhB,EAAKgB,OAAO,EAAEhB,EAAK,2DCpDpB,SAASiB,EAAMhC,GAK1B,OACQA,EAAMiC,OAAS,sBAAKrB,MAAK,sBAAiBZ,EAAMiC,MAAM5B,KAA7B,gCAAiEK,KAAK,QAAhF,UACX,iCANO,SAACwB,GAChB,IAAMC,EAAQD,EAAKL,cACnB,OAAOM,EAAMC,OAAO,GAAGT,cAAgBQ,EAAME,MAAM,GAIlCC,CAAWtC,EAAMiC,MAAM5B,QADrB,KACuCL,EAAMiC,MAAMM,OF+D9ExC,EAAOyC,WAAa,CAChBpC,MAAOqC,IAAUC,OACjBC,UAAWF,IAAUC,OAAOE,YAIhC7C,EAAO8C,aAAe,CAClBzC,MAAO,kBACPuC,UAAW,mBGOAG,MAzEf,WACE,MAAwBhC,mBAAS,SAAjC,mBAAOZ,EAAP,KAAa6C,EAAb,KACA,EAA0BjC,mBAAS,MAAnC,mBAAOmB,EAAP,KAAce,EAAd,KAGMC,EAAY,SAACC,EAAS7C,GAC1B2C,EAAS,CACPT,IAAKW,EACL7C,KAAMA,IAER8C,YAAW,WACTH,EAAS,QACR,OAqCL,OACE,qCAGA,cAACjD,EAAD,CAAQK,MAAM,YAAYuC,UAAU,QAAQzC,KAAMA,EAAMO,WAtCvC,SAACc,GAClB,IAAI6B,EAAI7B,EAAMC,OAAOlB,GACrB,GAAa,UAATJ,EACF,OAAQkD,GACN,IAAK,KACHL,EAAQ,QACRM,SAASC,KAAKrC,MAAMI,gBAAkB,UACtC4B,EAAU,uBAAwB,WAClCI,SAASjD,MAAQ,wBACjB,MAEF,IAAK,KACH2C,EAAQ,UACRM,SAASC,KAAKrC,MAAMI,gBAAkB,UACtC4B,EAAU,sBAAuB,WACjC,MAEF,IAAK,KACHF,EAAQ,WACRM,SAASC,KAAKrC,MAAMI,gBAAkB,UACtC4B,EAAU,wBAAyB,WACnC,MAEF,QACE,OAAO,OAIXF,EAAQ,SACRM,SAASC,KAAKrC,MAAMI,gBAAkB,QACtCgC,SAASjD,MAAQ,sBASnB,cAAC4B,EAAD,CAAOC,MAAOA,IAEZ,qBAAKhC,UAAU,iBAAf,SAMU,cAACY,EAAD,CAAUM,QAAQ,+BAA+BjB,KAAMA,UChExDqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,M","file":"static/js/main.cb2e8704.chunk.js","sourcesContent":["// Type rfc to get (React function based components). rfc is an shortkey in es7.\r\n\r\nimport React from \"react\";\r\n// impt Short key for (PropTypes)\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {  // We make props to customize name and use the same navbar wherever we need.\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">\r\n                    {props.title}\r\n                </Link>\r\n                <button\r\n                    className=\"navbar-toggler\"\r\n                    type=\"button\"\r\n                    data-bs-toggle=\"collapse\"\r\n                    data-bs-target=\"#navbarSupportedContent\"\r\n                    aria-controls=\"navbarSupportedContent\"\r\n                    aria-expanded=\"false\"\r\n                    aria-label=\"Toggle navigation\"\r\n                >\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                                Home\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link\" to=\"/about\">\r\n                                {props.abouttext}\r\n                            </Link> */}\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input\r\n                            className=\"form-control me-2\"\r\n                            type=\"search\"\r\n                            placeholder=\"Search\"\r\n                            aria-label=\"Search\"\r\n                        />\r\n                        <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n                            Search\r\n                        </button>\r\n                    </form> */}\r\n                    <div className=\"form-check form-switch mx-2\">\r\n                        <input className=\"form-check-input b1\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"b1\" />\r\n                        <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                    </div>\r\n                    <div className=\"form-check form-switch mx-2\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"b2\" />\r\n                        <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckDefault\">Red Mode</label>\r\n                    </div>\r\n                    <div class=\"form-check form-switch mx-2\">\r\n                        <input class=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"b3\" />\r\n                        <label class={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckDefault\">Green Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\n// These are just for security and precations reasons...\r\n\r\n// Setting proptypes so that, if we send any other type like int here, it will give an error.\r\n// pts for (PropTypes.string)\r\nNavbar.prototypes = {\r\n    title: PropTypes.string,  // .string to make sure we pass string only.\r\n    abouttext: PropTypes.string.isRequired  // to make it necessary (required) otherwise it gives an error.\r\n}\r\n\r\n// Default props in case we forget to set the props.\r\nNavbar.defaultProps = {\r\n    title: 'set title here!',\r\n    abouttext: 'set about here!'\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, setText] = useState(\"\")\r\n    // text = \"new text\"  // Wrong way to change the text.\r\n    // settext(\"new text\")  // Correct way to change the text.\r\n    \r\n    const handleUpClick= ()=>{\r\n        // console.log(\"Uppercase was clicked! \" + text);\r\n        let newText1 = text.toUpperCase();\r\n        setText(newText1);\r\n    }\r\n    \r\n    const handleLoClick= ()=>{\r\n        let newText2 = text.toLowerCase();\r\n        setText(newText2);\r\n    }\r\n\r\n    const handleClearClick= ()=>{\r\n        // let temp = text;\r\n        // handleRecoverClick(temp);\r\n        let newText3 = \"\";\r\n        setText(newText3);\r\n    }\r\n    \r\n    // const handleRecoverClick= (temporary)=>{\r\n    //     let newText4 = temporary;\r\n    //     setText(newText4);\r\n    // }\r\n\r\n\r\n    const handleOnChange= (event)=>{\r\n        // console.log(\"On change!\");\r\n        setText(event.target.value);  // To target value in textarea and modify it.\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}} onChange={handleOnChange} id=\"my_box\" rows=\"7\"></textarea>\r\n                <button className={`btn btn-${props.mode} mt-3`} onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className={`btn btn-${props.mode} mt-3 mx-3`} onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className={`btn btn-${props.mode} mt-3`} onClick={handleClearClick}>Clear Text</button>\r\n                {/* <button className={`btn btn-${props.mode} mt-3 mx-3`} onClick={handleRecoverClick}>Recover Text</button> */}\r\n\r\n            </div>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h3>Your Text Summary</h3>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p> {0.008 * text.split(\" \").length} Minutes read.</p>\r\n            <h4>Preview...</h4>\r\n            <p>{text.length>0?text:\"ENTER SOMETHING IN TEXTBOX TO PREVIEW IT HERE...\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n            props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n    )\r\n}\r\n\r\n// props.alert && means if it is true then only further code is gonna run and vice versa.","// import logo from './logo.svg';\nimport './App.css';\n// import About from './Componenets/About';\nimport Navbar from './Componenets/Navbar';\nimport TextForm from './Componenets/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './Componenets/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [alert, setalert] = useState(null);\n\n\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n\n  const toggleMode = (event) => {\n    let x = event.target.id;\n    if (mode === 'light') {\n      switch (x) {\n        case 'b1':\n          setmode('dark');\n          document.body.style.backgroundColor = '#2a2b2b';\n          showAlert(\"Dark mode is enabled\", \"success\");\n          document.title = \"TextUtils - Dark mode\";   // To change title when switching to Dark mode.\n          break;\n\n        case 'b2':\n          setmode('danger');\n          document.body.style.backgroundColor = '#d66060';\n          showAlert(\"Red mode is enabled\", \"success\");\n          break;\n\n        case 'b3':\n          setmode('success');\n          document.body.style.backgroundColor = '#60d678';\n          showAlert(\"Green mode is enabled\", \"success\");\n          break;\n\n        default:\n          return false;\n      }\n    }\n    else {\n      setmode('light'); // Remember to always use single quotes with setmode.\n      document.body.style.backgroundColor = 'white';\n      document.title = \"TextUtils - Home\"\n    }\n  }\n\n  return (\n    <>\n\n    {/* <Router> */}\n    <Navbar title='TextUtils' abouttext='About' mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert} />\n      \n      <div className=\"conatiner my-5\">\n        {/* <Switch> */}\n            {/* <Route exact path=\"/about\"> */}\n                {/* <About /> */}\n            {/* </Route> */}\n            {/* <Route exact path=\"/\"> */}\n                <TextForm heading='Enter text to Analyze below:' mode={mode} />\n            {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      \n    {/* </Router> */}\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}